# CHECK MULTICOLLINEARITY VIA VIF FIRST AS IMPACTS INTERPRETATION
# - Interpretation: 1 = not correlated, 1-5 = moderately correlated, > 5 = highly correlated. Needs intercept term
vif = pd.DataFrame()
vif["variables"] = X.columns
vif["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
print(vif)

corr_df = X.corr().abs()  # X[cols].corr().abs() 
triu_mask = np.triu(np.ones_like(corr_df, dtype=bool))
tri_df = corr_df.mask(triu_mask)   # sets half the values to Na values 
sns.heatmap(tri_df, center=0, cmap= sns.diverging_palette(h_neg=10,h_pos=240,as_cmap=True), linewidths=1)

### STATSMODEL ###
titanic_numeric = sm.add_constant(titanic_numeric) # for sm.logit, needs an intercept col
X = titanic_numeric.drop(columns = ['Survived'])
y = titanic_numeric['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.05, random_state = 123)
mod = sm.Logit(y_train, X_train).fit()   
mod.summary() # inference - N.B. non-standardised coefficients so cannot compare like for like 
train_probpreds = mod.predict(X_train)     # rf.mod(X_train)[:, 1] ??? difference??
train_classpreds = (mod.predict(X_train) > 0.5).astype(int)
test_probpreds = mod.predict(X_test)
test_classpreds = (mod.predict(X_test) > 0.5).astype(int)
